# Web Development in 2021

From [this Traversy Media video](https://www.youtube.com/watch?v=VfGW0Qiy2I0)

## About this Course

### What Is This Guide?

This is a roadmap for web developers in 2021 that includes the different technologies to choose from as well as some new trends and some guidance.

Everyone has a different path, this just gives you some insight into the available paths. Id does not choose it for you.

### Frontend VS Backend vs Full Stack

*   Frontend Dev: front facing website or app UI.

*   HTML, CSS, JavaScript, TypeScript, JS Frameworks, DOM, HTTP, etc.

*   Backend Dev: server APIs, data, tasks, etc.

*   Many languages to choose from: JavaScript, Python, C#, PHP and more
*   Databases (both relational and NoSQL)
*   Knowledge of servers, config, etc.

*   Full Stack Dev: combined frontend/backend

*   Both front and backend technologies

## Basic Tools

*   Computer and OS: MacOS, Windows, Linux
*   Text Editor: VS Code, Vim, Atom, Sublime Text
*   Web Browser: Chrome, Firefox, Safari, Edge
*   Terminal: Default, Hyper, Powershell, Git Bash
*   Design Software: Figma, Adobe XD, Photoshop, Sketch

## Frontend Development

### HTML & CSS

*   HTML5 page structure and semantic tags
*   Basic CSS styling
*   Positioning
*   Alignment (Flexbox and CSS Grid)
*   Transitions and animation
*   Responsive design and media queries

### Sass

Sass is a CSS preprocessor that gives you more functionality in your styling. Sass offers things like variables, mixins, functions, nesting, etc.

Although Sass is optional, it is something I suggest learning because it is easy to pick up and you will most likely run into it at some point

### CSS/UI Frameworks

These offer pre-made classes to create elements on the fly, like menus, lists, alerts, etc.

I suggest learning one of the following:

*   Tailwind CSS: utility-first framework
*   Bootstrap: it is very popular
*   Materialize: based on Material Design
*   Bulma: modular and lightweight

CSS frameworks can be a great tool to create websites and UIs quickly; however, it is important to learn the fundamentals of CSS first.

### UI Design

*   Color and contras: make sure that text is readable
*   White space: spacing between elements
*   Scale: sizing relative to other elements
*   Visual Hierarchy: arrange in order of importance
*   Typography: text typefaces, sizing, etc.

### JavaScript

JavaScript is extremely important for frontend and fullstack developers, because it is the language of the client side.

*   Basics: variables, arrays, functions, loops, etc.
*   DOM and Styling: selecting and manipulating elements
*   Array Methods: foreach, map, filter, reduce, etc.
*   JSON: JavaScript Object Notation
*   HTTP Requests: Fetch API (lets you send HTTP request and manage the response)

### Other Tools

*   Version Control: Git
*   Repository Manager: GitHub, Bitbucket, GitLab
*   Package Bundler: Parcel, Webpack, Rollup
*   Browser Developer Tools: console, network, storage, etc.
*   Editor Extensions and Helpers: Linting, Prettier, Live Server, Emmet, Snippets, etc.

### Basic Frontend Deployment

You should be able to do a basic website or frontend app deployment.

*   Static hosting: Netlify, GitHub Pages, Heroku
*   CPanel Hosting: InMotion, Hostgator, Bluehost

#### Methods of Deploying

*   Git: continuous deploymnet by pushing to a repo
*   FTP/SFTP: file transfer protocol (slow)
*   SSH (Secure Shell): terminal

During deployment, you will run into some other things:

*   Domain Names: Namecheap, Google Domains, Enom
*   Email Hosting: Namecheap, Zoho Mail, CPanel
*   SSL Certificates: Let's Encrypt, Cloudflare, Namecheap

### Foundational Web Developer

*   Setup a productive development environment
*   Write HTML, CSS and JavaScript
*   Use Sass and a CSS framework (optional)
*   Create responsive layouts
*   Build websites with some dynamic functionality and work with the DOM
*   Connect to 3rd party APIs with Fetch and understand basic HTTP requests
*   Use Git with GitHub or some other Git repository service (Bitbucket, etc.)
*   Deploy and manage a website or small web application

### What Now?

The next step is up to you. You can:

*   Sharpen your JavaScript skills
*   Learn a frontend framework (React, Vue, Angular)
*   Learn a server side language or technology (NodeJS, Python, Java, Go, etc.)

### Frontend Framework (Choose One!)

As a frontend development, you will most likely need to be familiar with a popular frontend JavaScript framework:

*   React and a state management tool (Redux, Context, MobX)
*   Vue and a state management tool (Vuex)
*   Angular and a state management tool (Shared Service, NgRx)
*   Svelte and a state management tool (Context API)

### TypeScript

TypeScript is a superset of JavaScript and is popular on its own as well as being paired with a frontend framework.

*   Brings a "strict‚Äù type system to JavaScript
*   Makes your code more robust and less prone to errors
*   Object oriented programming (classes, interfaces, generics, modules)
*   Great for larger projects

### Testing

Testing is a great thing to have in your toolkit. It helps prevent problems before they happen. This goes for all languages.

*   Unit Tests: individual units like functions or classes*   Integration Tests: modules tested as a group*   End-to-End Tests: test workflow from start to finish

There are testing frameworks available for different languages. For example, Jest and Mocha for JavaScript and PyTest and Robot for Python.

### Server Side Rendering (Choose One)

You can also run frameworks like React and Vue on the Server. There are advantages to this, such as better SEO, easy routing, etc.

*   Next.js (React)
*   Nuxt.js (Vue)
*   Sapper (Svelte)
*   Angular Universal (Angular)

### Static Site Generators (Choose One)

SSGs generate your website pages at build-time as opposed to real-time, making them super fast and secure.

*   Gatsby (React Based)
*   Gridsome (Vue Based)
*   Jekyll (Ruby Based)
*   11ty (JavaScript alternative to Jekyll)
*   Hugo (Go Based)
